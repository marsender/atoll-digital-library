## =============================================================================
## Atoll Digital Library install
## =============================================================================


This documentation explains how to build and install atoll-digital-library.

The project code is available through GitHub: https://github.com/marsender/atoll-digital-library


## Install the dependencies
## -----------------------------------------------------------------------------

# Before you can start compiling, you need a couple of packages that are required
# to compile the project. Use your distributions package manager to install those
# packages.
#   CMake - Cross-platform build system - http://www.cmake.org/
#   A C++ compiler. We test mostly on GCC and Visual Studio 9+
#   ICU - International Components for Unicode - http://www.icu-project.org/
#   CppUnit - C++ unit testing framework - http://cppunit.sourceforge.net/
#   Xerces-C++: XML parser - http://xerces.apache.org/xerces-c/
#   Xalan-C++: - XSLT processor - http://xml.apache.org/xalan-c/
#   Berkeley DB - Embeddable database: http://www.oracle.com/us/products/database/berkeley-db/
#   zlib - Compression Library - http://www.zlib.net/
#   Doxygen - Generate documentation: http://www.stack.nl/~dimitri/doxygen/

# For debian based linux, the folowing commands will install all the dependencies
sudo apt-get install cmake
sudo apt-get install g++
sudo apt-get install libicu-dev
sudo apt-get install libcppunit-dev
sudo apt-get install libxerces-c-dev
sudo apt-get install libxalan-c-dev
sudo apt-get install libdb-dev libdb++-dev
sudo apt-get install zlib1g-dev
sudo apt-get install xml-core
sudo apt-get install doxygen # Optional


## Build the code on linux with CMake
## -----------------------------------------------------------------------------

# Set the root of the sourcecode (from now on referred to as ${AtollRoot})
AtollRoot=~/atoll-digital-library

# Get the source code
git clone https://github.com/marsender/atoll-digital-library.git ${AtollRoot}

# Change directory into the root of the sourcecode
cd ${AtollRoot}

# Create the build directory
# You can create multiple build directories, one for each type of build
mkdir build
cd build

# Configure using cmake
#   The basic syntax is cmake [-G "Script name"] ..
#   Where "Script name" is the name of the scripts to build.
#   A list of supported build scripts can be found by: cmake --help
#   You can configure several options such as the build type, debugging information,
#   etc, by using the CMake GUI or by calling: ccmake ..
# Common options:
#   cmake -G "Unix Makefiles" .. # Use a specific generator
#   cmake -D CMAKE_BUILD_TYPE=Release .. # Debug, Release, RelWithDebInfo and MinSizeRel
#   cmake --warn-uninitialized .. # Warn about uninitialized values
cmake ..

# Start the build
# This depends on which build script you specified, but it would be something like
# make or nmake or open the solution files with your IDE.
# The binary files will be available in ${AtollRoot}/build/bin
make

# Test the code with one of this command
ctest -V
make test

# Install the library
# The install log file install_manifest.txt will contain the list of installed files
sudo make install

# Generate the doxygen html documentation
make doc


## Build the samples on linux with CMake
## -----------------------------------------------------------------------------

# In order to test and validate each dependency you can build the sample projects
# located in the directory src/samples
#   berkeleydb
#   cppunit
#   icu
#   pluginarchitecture
#   xalan
#   xerces
# To build a project (from now on referred to as ${Project}), do the folowing

# Set the root of the sourcecode (from now on referred to as ${AtollRoot})
AtollRoot=~/atoll-digital-library

# Set the project name
Project=berkeleydb

# Change directory into the root of the sample project
cd ${AtollRoot}/src/samples/${Project}

# Create the build directory
mkdir build
cd build

# Configure using cmake
cmake ..

# Start the build
make

# Test the code with one of this command
ctest -V
make test


## Build the code on windows Visual Studio
## -----------------------------------------------------------------------------

# In order to test and validate each dependency you can build the sample projects
# located in the directory src/samples
# Here is the list of Visual Studio 2010 projects:
#   berkeleydb/berkeleydb.sln
#   cppunit <= Todo
#   icu <= Todo
#   pluginarchitecture/pluginarchitecture.sln
#   xalan <= Todo
#   xerces/xerces.sln

# Atoll Visual Studio 2010 project is in the directory:
win/atoll.sln


## Build the code on windows with CMake and Visual Studio
## -----------------------------------------------------------------------------

# Set the root of the sourcecode (from now on referred to as %AtollRoot%
set AtollRoot=C:\soft\atoll-digital-library

# Init Visual Studio variables
"C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat" x86

# Create the build directory
# You can create multiple build directories, one for each type of build
cd /D %AtollRoot%
set BuildType=Release
mkdir build_vc_%BuildType%
cd build_vc_%BuildType%

# Set library paths
set ICUROOT=C:\soft\icu
set BERKELEYDBROOT=C:\soft\berkeleydb
set XERCESCROOT=C:\soft\xerces
set XALANCROOT=C:\soft\xalan
set ZLIBROOT=C:\soft\lib\zlib
set CPPUNITROOT=C:\soft\lib\cppunit
set VLDROOT=C:\soft\lib\vld

# Configure using cmake
#   The basic syntax is cmake [-G "Script name"] ..
#   Where "Script name" is the name of the scripts to build.
#   A list of supported build scripts can be found by: cmake --help
#   You can configure several options such as the build type, debugging information,
#   etc, by using the CMake GUI or by calling: ccmake ..
# Common options:
#   cmake -G "Unix Makefiles" .. # Use a specific generator
#   cmake -D CMAKE_BUILD_TYPE=Release .. # Debug, Release, RelWithDebInfo and MinSizeRel
#   cmake --warn-uninitialized .. # Warn about uninitialized values
cmake -G "NMake Makefiles" ..
cmake -D CMAKE_BUILD_TYPE=%BuildType% ..
cmake -D ICU_INCLUDE_DIR=%ICUROOT%\include -D ICU_LIBRARY_DIR=%ICUROOT%\lib ..
cmake -D BDB_INCLUDE_DIR=%BERKELEYDBROOT%\build_windows -D BDB_LIBRARY_DIR=%BERKELEYDBROOT%\build_windows\Win32\Release -D BDB_VERSION=53 ..
cmake -D XERCESC_INCLUDE_DIR=%XERCESCROOT%\src -D XERCESC_LIBRARY_DIR=%XERCESCROOT%\lib ..
cmake -D XALAN_INCLUDE_DIR=%XALANCROOT%\src -D XALAN_INCLUDE_MSG_DIR=%XALANCROOT%\Build\Win32\VC10\Release\Nls\Include -D XALAN_LIBRARY_DIR=%XALANCROOT%\lib ..
cmake -D ZLIB_INCLUDE_DIR=%ZLIBROOT%\include -D ZLIB_LIBRARY_DIR=%ZLIBROOT%\lib ..
cmake -D CPPUNIT_INCLUDE_DIR=%CPPUNITROOT%\include -D CPPUNIT_LIBRARY_DIR=%CPPUNITROOT%\lib ..
cmake -D VLD_INCLUDE_DIR=%VLDROOT%\include -D VLD_LIBRARY_DIR=%VLDROOT%\lib\Win32 ..
cmake ..

# Start the build
nmake

set Path=%Path%;%XERCESCROOT%\bin
set Path=%Path%;%AtollRoot%\build_vc_Release\bin
cd /D %AtollRoot%
atoll_console "-j" "test" "-l" "./data_unittest/_atoll.log"
ctest -V


## Wiki and issues
## -----------------------------------------------------------------------------

Project Wiki: https://github.com/marsender/atoll-digital-library/wiki

Please report any issues on the project issue tracker: https://github.com/marsender/atoll-digital-library/issues
